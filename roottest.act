/*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                              ;
;                                roottest.act   	                           ;
;                                 George Ore                                   ;
;                                                                              ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 Description: This file is to test the capabilies of the root testing module.
 Goal: Make sure that the test_root module works as intended.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            Required Namespace Imports                        */
import sim;     // Simulation library namespace
/*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            Table of Contents
        Process Name    |       Purpose
    simplechild         |   Simulates a simple child that sends known bused data
    testroot            |   Recieves all manner of data on a bus
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 Revision History:  09/16/24 George Ore Created file
                    09/16/24 George Ore Validated and tested working
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;*/

/*******************************************************************************
;*                              PROCESSES                                      *
;******************************************************************************/

/* simple_child:

 Description: Simulates a simple child that sends known data through a bus.

 Operation: The child begins by waiting for the reset state. When reached, it
        resets all of its outputs low and waits until the ack input is low. 
        Next it waits until the reset state is off to begin sending known
        permutations of data through its outputs. The word permutation order
        is set but each individual bit is set in parallel. Other than that, 
        it follows standard 4-phase handshaking all throughout the program.

 Features:
    - 4 bit (8 line) output but
    - All 16 permutations of data output
    - Waits for acks from receiver

 Input Ports:   Name    |   Purpose
                p_a     |   Parent acknowledge

 Output Ports:  Name    |   Purpose
                p[8]    |   8 bit bus containing child data

 Error Handling:    None.
 Known Bugs:        None.
 Limitations:       None.

 Revision History:  09/16/24    George Ore  Created module
                    09/16/24    George Ore  Improved testing capabilities

 Pseudo Code
   wait_ack_off();
   for permutation in {0,1}^4
       data_on(permutation)
       wait_ack_on()
       data_off(permutation)
       wait_ack_off()
*/
defproc simple_child(bool! p[8]; bool? p_a; bool? reset){
    
    hse { 
            [reset];    //Wait until it is reset time
            [~p_a];     //Wait until ack is off
            p[0]-; p[1]-; p[2]-; p[3]-; p[4]-; p[5]-; p[6]-; p[7]-; //Turn all off
            log("finished init inside simple child");            
            [~reset];
            log("reset off in test root");

            //Send various permutations of data
            p[0]+, p[2]+, p[4]+, p[6]+;    //0000
            [p_a];
            p[0]-, p[2]-, p[4]-, p[6]-;
            [~p_a];
            p[1]+, p[2]+, p[4]+, p[6]+;    //1000
            [p_a];
            p[1]-, p[2]-, p[4]-, p[6]-;
            [~p_a];
            p[0]+, p[3]+, p[4]+, p[6]+;    //0100
            [p_a];
            p[0]-, p[3]-, p[4]-, p[6]-; 
            [~p_a];
            p[1]+, p[3]+, p[4]+, p[6]+;    //1100
            [p_a];
            p[1]-, p[3]-, p[4]-, p[6]-; 
            [~p_a];
            p[0]+, p[2]+, p[5]+, p[6]+;    //0010
            [p_a];
            p[0]-, p[2]-, p[5]-, p[6]-; 
            [~p_a];
            p[1]+, p[2]+, p[5]+, p[6]+;    //1010
            [p_a];
            p[1]-, p[2]-, p[5]-, p[6]-; 
            [~p_a];
            p[0]+, p[3]+, p[5]+, p[6]+;    //0110
            [p_a];
            p[0]-, p[3]-, p[5]-, p[6]-; 
            [~p_a];
            p[1]+, p[3]+, p[5]+, p[6]+;    //1110
            [p_a];
            p[1]-, p[3]-, p[5]-, p[6]-; 
            [~p_a];
            p[0]+, p[2]+, p[4]+, p[7]+;    //0001
            [p_a];
            p[0]-, p[2]-, p[4]-, p[7]-; 
            [~p_a];
            p[1]+, p[2]+, p[4]+, p[7]+;    //1001
            [p_a];
            p[1]-, p[2]-, p[4]-, p[7]-; 
            [~p_a];
            p[0]+, p[3]+, p[4]+, p[7]+;    //0101
            [p_a];
            p[0]-, p[3]-, p[4]-, p[7]-; 
            [~p_a];
            p[1]+, p[3]+, p[4]+, p[7]+;    //1101
            [p_a];
            p[1]-, p[3]-, p[4]-, p[7]-; 
            [~p_a];
            p[0]+, p[2]+, p[5]+, p[7]+;    //0011
            [p_a];
            p[0]-, p[2]-, p[5]-, p[7]-; 
            [~p_a];
            p[1]+, p[2]+, p[5]+, p[7]+;    //1011
            [p_a];
            p[1]-, p[2]-, p[5]-, p[7]-; 
            [~p_a];
            p[0]+, p[3]+, p[5]+, p[7]+;    //0111
            [p_a];
            p[0]-, p[3]-, p[5]-, p[7]-; 
            [~p_a];
            p[1]+, p[3]+, p[5]+, p[7]+;    //1111
            [p_a];
            p[1]-, p[3]-, p[5]-, p[7]-; 
            [~p_a]

        }

}

/* test_root:

 Description: Emulates the final output bus for packets to be sent & processed.
        This is a root is designed to take in any combination of data 
        permutations from the input bus. In testing, these ports can be watched.

 Operation: The root begins by setting its output low. Then it waits for one
        of the deterministically defined input permutations. Once all are 
        received, it sends an acknowledge and waits until all data is off
        to deactivate the acknowledge.

 Features:
    - 4 bit (8 line) input processing
    - Can receive any permutation of data input
    - Sends acks to the sender

 Input Ports:   Name    |   Purpose
                c[8]    |   8 bit bus containing child data   

 Output Ports:  Name    |   Purpose
                c_a     |   Child acknowledge

 Error Handling:    None.
 Known Bugs:        None.
 Limitations:       None.

 Revision History:  09/15/24    George Ore  First instance of code
                    09/16/24    George Ore  Made it work good

 Pseudo Code
   all_out_off();
   while(1)
       wait_for_child_data_on()
       ack_on()
       wait_for_child_data_off()
       ack_off()
*/
defproc test_root(bool? reset; bool? c[8]; bool! c_a){
    
    hse { 
            [reset];
            c_a-;  //Start with the acknowledge off
            log("finished init inside test root");
            [~reset];
            log("reset off in test root");

            *[ /*Start off by waiting for one of the conditions to come true*/
                
            //Explicit cases
            [  c[0] & c[2] & c[4] & c[6] -> skip    //0000
            [] c[1] & c[2] & c[4] & c[6] -> skip    //1000
            [] c[0] & c[3] & c[4] & c[6] -> skip    //0100
            [] c[1] & c[3] & c[4] & c[6] -> skip    //1100
            [] c[0] & c[2] & c[5] & c[6] -> skip    //0010
            [] c[1] & c[2] & c[5] & c[6] -> skip    //1010
            [] c[0] & c[3] & c[5] & c[6] -> skip    //0110
            [] c[1] & c[3] & c[5] & c[6] -> skip    //1110
            [] c[0] & c[2] & c[4] & c[7] -> skip    //0001
            [] c[1] & c[2] & c[4] & c[7] -> skip    //1001
            [] c[0] & c[3] & c[4] & c[7] -> skip    //0101
            [] c[1] & c[3] & c[4] & c[7] -> skip    //1101
            [] c[0] & c[2] & c[5] & c[7] -> skip    //0011
            [] c[1] & c[2] & c[5] & c[7] -> skip    //1011
            [] c[0] & c[3] & c[5] & c[7] -> skip    //0111
            [] c[1] & c[3] & c[5] & c[7] -> skip    //1111
            ];
            
            // //XOR version THIS ONLY WORKS WITH INTEGERS????
            // [(c[0] ^ c[1]) & (c[2] ^ c[3]) & (c[4] ^ c[5]) & (c[6] ^ c[7]) -> skip];

            //Acknowledge that foo
            c_a+;

            //Now wait until all of them are off
            [~c[0] & ~c[1] & ~c[2] & ~c[3] & ~c[4] & ~c[5] & ~c[6] & ~c[7]];

            //Acknowledge that foo
            c_a-
            ]
        }
}

defproc test(){
    // Setup reset signal
    bool reset;

    // Define a root node and a test child
	test_root tr;
	simple_child sc;


    // Connect wires
    sc.reset = reset;
    sc.p_a = tr.c_a;
 
    tr.reset = reset;

    tr.c[0] = sc.p[0];
    tr.c[1] = sc.p[1];
    tr.c[2] = sc.p[2];
    tr.c[3] = sc.p[3];
    tr.c[4] = sc.p[4];
    tr.c[5] = sc.p[5];
    tr.c[6] = sc.p[6];
    tr.c[7] = sc.p[7];

}