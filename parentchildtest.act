/*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                              ;
;                             parentchildtest.act  	                           ;
;                                 George Ore                                   ;
;                                                                              ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 Description: This file contains modules used to test the capabilies of a relay
               NoC. This is a test of that test.
 Goal: Fine tune the testing environment for the NoC.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            Required Namespace Imports                        */
import sim;     // Simulation library namespace
/*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            Table of Contents
        Process Name    |       Purpose
    testchild           |   Simulates a child that actively sends data on a bus
    testchild           |   Simulates a child that actively sends data on a bus
    testroot            |   Simulates the final data destination bus
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 Revision History:  09/15/24 George Ore First instance of code
                    09/16/24 George Ore Formated file
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;*/

/*******************************************************************************
;*                              PROCESSES                                      *
;******************************************************************************/

/*
Custom Modules
*/

/*  ctl_tag 

    Contains the PRS for the combination of address tagging and sequence control blocks.

    reset - signal to reset this thing??


*/
defproc ctl_tag(bool? reset;        //For reseting
                bool? l_r; bool? r_a; bool? x_r; bool? p_a; //Inputs 
		        bool! l_a; bool! r_r; bool! x_a; bool! p_0; //Outputs
                bool! p_1){

    // state variable
    bool a_r; bool a_a;
    bool f; bool g;
    bool n; bool m;
     prs {

        //CTL
        ~reset & (x_r | l_r ) & (~a_a) -> r_r+ 
        reset | a_a -> r_r-

        ~reset & l_a -> a_r+
        reset | ~l_a -> a_r-

        ~reset & (l_r & r_a) -> l_a+
        reset | (~r_a) -> l_a-

        //TAG
        ~reset & (f & ~g & x_r & ~x_a & a_r & ~a_a & ~p_0 & ~p_1 & ~p_a) -> x_a+
        reset | (f & ~g & ~x_r & x_a & a_r & ~a_a & ~p_0 & ~p_1 & ~p_a) -> x_a-

        ~reset & ((f | g) & ~x_r & ~x_a & a_r & ~a_a & ~p_0 & ~p_1 & ~p_a) -> a_a+
        reset | (~f & ~g & ~x_r & ~x_a & ~a_r & a_a & ~p_0 & ~p_1 & ~p_a) -> a_a-

        ~reset & (~f & g & ~x_r & ~x_a & ~a_r & a_a & ~p_0 & ~p_1 & ~p_a) -> p_0+
        reset | (~f & ~g & ~x_r & ~x_a & ~a_r & a_a & p_0 & ~p_1 & p_a) -> p_0-

        ~reset & (f & ~g & ~x_r & ~x_a & ~a_r & a_a & ~p_0 & ~p_1 & ~p_a) -> p_1+
        reset | (~f & ~g & ~x_r & ~x_a & ~a_r & a_a & ~p_0 & p_1 & p_a) -> p_1-

        ~reset & (~f & ~g & x_r & ~x_a & a_r & ~a_a & ~p_0 & ~p_1 & ~p_a) -> f+
        reset | (f & ~g & ~x_r & ~x_a & ~a_r & a_a & ~p_0 & p_1 & p_a) -> f-

        ~reset & (~f & ~g & ~x_r & ~x_a & a_r & ~a_a & ~p_0 & ~p_1 & ~p_a) -> g+
        reset | (~f & g & ~x_r & ~x_a & ~a_r & a_a & p_0 & ~p_1 & ~p_a) -> g-

    }
}

/*  ctl_h

    Contains the PRS for the special control block CTL_H

    reset - signal to reset this thing??


*/
defproc ctl_h(bool? reset;        //For reseting
                bool? l_r; bool? r_a; bool? p_a; //Inputs 
		        bool? p_0; bool? p_1;
                bool! l_a; bool! r_r; bool! p_f //Outputs
                ){

    // state variable
    bool a_r; bool a_a;
    bool f; bool g;
    bool n; bool m;
     prs {

        //CTL
        ~reset & (l_a) & (~r_a) -> r_r+ 
        reset | r_a -> r_r-

        ~reset & (l_r) -> l_a+
        reset | (~l_r) -> l_a-

        ~reset & ( p_0 | p_1 ) -> p_f+
        reset | ( ~p_0 & ~p_1 ) -> p_f-
    }
}

/*  buffer

    Contains the PRS for the data information line buffers.

    reset - signal to reset this thing??


*/
defproc buffer(bool? reset;             //For reseting
		        bool? c0_0; bool? c0_1; //Inputs
                bool? c1_0; bool? c1_1;
                bool? c2_0; bool? c2_1;
                bool? ct_0; bool? ct_1;
                bool? p_a; bool? x_a;
                bool! c_a; bool! x_r;   //Outputs 
                bool! p0_0; bool! p0_1;
                bool! p1_0; bool! p1_1;
                bool! p2_0; bool! p2_1; 
                bool! pt_0 ){

    // state variable
    bool a;
     prs {

        //a
        ~reset & (~a & ~x_r & ~x_a
        & ~c_a & (c0_0 | ~c0_1 | ~c1_0 | ~c1_1 | ~c2_0 | ~c2_1) & (ct_0) & ~ct_1 
        & ~p_a & ~p0_0 & ~p0_1 & ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1 & ~pt_0) -> a+ 
        reset | (a & x_r & x_a
        & ~c_a & ((~c0_0 & c0_1)|(c0_0&~c0_1)) & ((~c1_0&c1_1)|(c1_0&~c1_1)) & ((~c2_0&c2_1)|(c2_0&~c2_1)) & ~ct_0 & (ct_1) 
        & ~p_a & ~p0_0 & ~p0_1 & ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1 & ~pt_0) -> a-

        //x_r
        ~reset & (a & ~x_r & ~x_a
        & ~c_a & (c0_0 | ~c0_1 | ~c1_0 | ~c1_1 | ~c2_0 | ~c2_1) & (ct_0) & ~ct_1 
        & ~p_a & ~p0_0 & ~p0_1 & ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1 & ~pt_0) -> x_r+
        reset | (~a & x_r & x_a
        & ~c_a & ~c0_0 & ~c0_1 & ~c1_0 & ~c1_1 & ~c2_0 & ~c2_1 & ~ct_0 & ~ct_1 
        & ~p_a & ~p0_0 & ~p0_1 & ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1 & ~pt_0) -> x_r-

        //c_a
      ( ~reset & ((a) & x_r & x_a  //Intended behavior given ct_1 was NOT activated
        & ~c_a & ((~c0_0 & c0_1)|(c0_0&~c0_1)) & ((~c1_0&c1_1)|(c1_0&~c1_1)) & ((~c2_0&c2_1)|(c2_0&~c2_1)) & (ct_0) & ~ct_1 
        & ~p_a & ((~p0_0 & p0_1)|(p0_0&~p0_1)) & ((~p1_0&p1_1)|(p1_0&~p1_1)) & ((~p2_0&p2_1)|(p2_0&~p2_1)) & pt_0) ) 
     |( ~reset & ((~a) & x_r & x_a  //Intended behavior given ct_1 was activated
        & ~c_a & ((~c0_0 & c0_1)|(c0_0&~c0_1)) & ((~c1_0&c1_1)|(c1_0&~c1_1)) & ((~c2_0&c2_1)|(c2_0&~c2_1)) & ~ct_0 & (ct_1) 
        & ~p_a & ((~p0_0 & p0_1)|(p0_0&~p0_1)) & ((~p1_0&p1_1)|(p1_0&~p1_1)) & ((~p2_0&p2_1)|(p2_0&~p2_1)) & pt_0) )-> c_a+ 

     reset |
      ( ~reset & ((a) & x_r & x_a  //Intended behavior given ct_1 was NOT activated
        & c_a & ~c0_0 & ~c0_1 & ~c1_0 & ~c1_1 & ~c2_0 & ~c2_1 & ~ct_0 & ~ct_1 
        & p_a & ((~p0_0 & p0_1)|(p0_0&~p0_1)) & ((~p1_0&p1_1)|(p1_0&~p1_1)) & ((~p2_0&p2_1)|(p2_0&~p2_1)) & pt_0) ) 
     |( ~reset & ((~a) & x_r & x_a  //Intended behavior given ct_1 was activated
        & c_a & ~c0_0 & ~c0_1 & ~c1_0 & ~c1_1 & ~c2_0 & ~c2_1 & ~ct_0 & ~ct_1 
        & p_a & ((~p0_0 & p0_1)|(p0_0&~p0_1)) & ((~p1_0&p1_1)|(p1_0&~p1_1)) & ((~p2_0&p2_1)|(p2_0&~p2_1)) & pt_0) )-> c_a-
    //The above can be easily condensed by removing a probably


        //p0_0
        ~reset & ((a  | ~a) & x_r & x_a
        & ~c_a & c0_0 & ~c0_1 /*& ~c1_0 & ~c1_1 & ~c2_0 & ~c2_1*/ & ((~ct_0 & ct_1)|(ct_0 & ~ct_1)) 
        & ~p_a & ~p0_0 & ~p0_1 /*& ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1*/ & ~pt_0) -> p0_0+ 
        reset | ((a  | ~a) & x_r & x_a
        & ~c_a & ~c0_0 & ~c0_1 & ~c1_0 & ~c1_1 & ~c2_0 & ~c2_1 & ~ct_0 & ~ct_1 
        & (p_a) & p0_0 & ~p0_1 /*& ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1*/ & (pt_0)) -> p0_0-

        //p0_1
        ~reset & ((a  | ~a) & x_r & x_a
        & ~c_a & ~c0_0 & c0_1 /*& ~c1_0 & ~c1_1 & ~c2_0 & ~c2_1*/ & ((~ct_0 & ct_1)|(ct_0 & ~ct_1)) 
        & ~p_a & ~p0_0 & ~p0_1 /*& ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1*/ & ~pt_0) -> p0_1+ 
        reset | ((a  | ~a) & x_r & x_a
        & ~c_a & ~c0_0 & ~c0_1 & ~c1_0 & ~c1_1 & ~c2_0 & ~c2_1 & ~ct_0 & ~ct_1 
        & (p_a) & ~p0_0 & p0_1 /*& ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1*/ & (pt_0)) -> p0_1-

        //p1_0
        ~reset & ((a  | ~a) & x_r & x_a
        & ~c_a & /*c0_0 & ~c0_1 &*/ c1_0 & ~c1_1 & /*~c2_0 & ~c2_1 &*/ ((~ct_0 & ct_1)|(ct_0 & ~ct_1)) 
        & ~p_a & /*~p0_0 & ~p0_1 /*& ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1 &*/ ~pt_0) -> p1_0+ 
        reset | ((a  | ~a) & x_r & x_a
        & ~c_a & ~c0_0 & ~c0_1 & ~c1_0 & ~c1_1 & ~c2_0 & ~c2_1 & ~ct_0 & ~ct_1 
        & (p_a) & /*p0_0 & ~p0_1 &*/ p1_0 & ~p1_1 /*& ~p2_0 & ~p2_1*/ & (pt_0)) -> p1_0-

        //p1_1
        ~reset & ((a  | ~a) & x_r & x_a
        & ~c_a & /*c0_0 & ~c0_1 &*/ ~c1_0 & c1_1 /*& ~c2_0 & ~c2_1*/ & ((~ct_0 & ct_1)|(ct_0 & ~ct_1)) 
        & ~p_a & /*~p0_0 & ~p0_1 /*& ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1 &*/ ~pt_0) -> p1_1+ 
        reset | ((a  | ~a) & x_r & x_a
        & ~c_a & ~c0_0 & ~c0_1 & ~c1_0 & ~c1_1 & ~c2_0 & ~c2_1 & ~ct_0 & ~ct_1 
        & (p_a) & /*p0_0 & ~p0_1 &*/ ~p1_0 & p1_1 /*& ~p2_0 & ~p2_1*/ & (pt_0)) -> p1_1-

        //p2_0
        ~reset & ((a  | ~a) & x_r & x_a
        & ~c_a & /*~c0_0 & ~c0_1 & ~c1_0 & ~c1_1 &*/ c2_0 & ~c2_1 & ((~ct_0 & ct_1)|(ct_0 & ~ct_1)) 
        & ~p_a & /*~p0_0 & ~p0_1 & ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1 &*/ ~pt_0) -> p2_0+ 
        reset | ((a  | ~a) & x_r & x_a
        & ~c_a & ~c0_0 & ~c0_1 & ~c1_0 & ~c1_1 & ~c2_0 & ~c2_1 & ~ct_0 & ~ct_1 
        & (p_a) & /*~p0_0 & ~p0_1 & ~p1_0 & ~p1_1 &*/ p2_0 & ~p2_1 & (pt_0)) -> p2_0-

        //p2_1
        ~reset & ((a  | ~a) & x_r & x_a
        & ~c_a & /*~c0_0 & ~c0_1 & ~c1_0 & ~c1_1 &*/ ~c2_0 & c2_1 & ((~ct_0 & ct_1)|(ct_0 & ~ct_1)) 
        & ~p_a & /*~p0_0 & ~p0_1 & ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1 &*/ ~pt_0) -> p2_1+ 
        reset | ((a  | ~a) & x_r & x_a
        & ~c_a & ~c0_0 & ~c0_1 & ~c1_0 & ~c1_1 & ~c2_0 & ~c2_1 & ~ct_0 & ~ct_1 
        & (p_a) & /*~p0_0 & ~p0_1 & ~p1_0 & ~p1_1 &*/ ~p2_0 & p2_1 & (pt_0)) -> p2_1-

        //pt_0
        ~reset & ((a  | ~a) & x_r & x_a
        & ~c_a & ((~c0_0 & c0_1)|(c0_0&~c0_1)) & ((~c1_0&c1_1)|(c1_0&~c1_1)) & ((~c2_0&c2_1)|(c2_0&~c2_1)) & ((~ct_0 & ct_1)|(ct_0 & ~ct_1))
        & ~p_a & ((~p0_0 & p0_1)|(p0_0&~p0_1)) & ((~p1_0&p1_1)|(p1_0&~p1_1)) & ((~p2_0&p2_1)|(p2_0&~p2_1)) & ~pt_0) -> pt_0+ 
        reset | ((a  | ~a) & x_r & x_a
        & ~c_a & ~c0_0 & ~c0_1 & ~c1_0 & ~c1_1 & ~c2_0 & ~c2_1 & ~ct_0 & ~ct_1 
        & (p_a) & ~p0_0 & ~p0_1 & ~p1_0 & ~p1_1 & ~p2_0 & ~p2_1 & (pt_0)) -> pt_0-

    }
}

/*
Testing Modules
*/


/* test_child:

 Description: Generates random data to be sent up the network. This child is
        meant to be attached to every node in the network.

 Operation: The module resets all of its outputs before begining an infinite
        loop. To be robust, each child will have various parameters to simulate
        variance in data. It must satisfy a triggering chance parameter before
        starting the data transmission. At the trigger condition, it will select
        a random packet length between 1-8. It will send four bit data words
        with a binomial(.5) distribution for selecting 0 or 1 on the three data
        bits. The final termination bit will be 0 until the final word of the
        packet where it will be 1.

 Features:
    - Variable firing chance
        FOR NOW HARD STUCK AT 12.5% FIRING CHANCE
    - Random packet length
        FOR NOW WE ARE HAVING A MINIMUM PACKET LENGTH OF 1 WORD
    - Randomized packet content
        FOR NOW HAS UNBIASES 50/50 CHANCE

 Input Ports:   Name    |   Purpose
                p_a     |   Parent acknowledge
                R       |   Random 3 bit integer
                reset   |   Reset signal

 Output Ports:  Name    |   Purpose (for all: send generated data)
                p0_0    |   Parent bit 0 low line 
                p0_1    |   Parent bit 0 high line 
                p1_0    |   Parent bit 1 low line
                p1_1    |   Parent bit 1 high line
                p2_0    |   Parent bit 2 low line
                p2_1    |   Parent bit 2 high line
                pt_0    |   Parent temination bit low line
                pt_1    |   Parent termination bit high line

 Local variables:   Name    |   Purpose
                    randc   |   Random activation chance var 
                    randl   |   Random packet length var
                    rand0   |   Random bit 0 data var
                    rand1   |   Random bit 1 data var
                    rand2   |   Random bit 2 data var

 Error Handling:    None.
 Known Bugs:        None.
 Limitations:       None.

 Revision History:  09/15/24    George Ore  First instance of code
                    09/16/24    George Ore  Made it work good

 Pseudo Code:
  
  while(1)
    result = roll_dice()
    if result == win
      plength = roll_dice()
      for (i=0; i<plength-1; i++)
        send_packet(b0=roll_dice(), b1=roll_dice(), b2=roll_dice(), tcond=0)
      send_packet(b0=roll_dice(), b1=roll_dice(), b2=roll_dice(), tcond=1)
*/
defproc test_child(bool! p0_0; bool! p0_1;   //Output channels
                    bool! p1_0; bool! p1_1;
                    bool! p2_0; bool! p2_1;
                    bool! pt_0; bool! pt_1;
                    bool? p_a;              //Input channels
                    chan?(int<3>) R;        //Random source
                    bool? reset){           //Reset signal
    int randc;  //Firing chance
    int randl;  //Packet length
    int rand0;  //For random bit content
    int rand1;
    int rand2;
    
  chp {
        //Reset all signals if reset condition is on
        [reset -> p0_0-, p0_1-, p1_0-, p1_1-, p2_0-, p2_1-, pt_0-, pt_1-];
        log("finished init inside test child");
        [~reset];
        log("reset off in test child");

        *[ /* fire if random chance condition is met */
            log("inside loop");
            R?randc;     //Roll for activation
            log("just rolled");
            [(randc = 3) ->
                //OMG YOU GOT LUCKY IT ACTIVATED
                log("omg lucky");
                R?randl;     //Roll for packet length
                *[randl < 8 -> //Send a random set of bits for each word 

                    /* Roll for three bits of random data */
                    R?rand0;
                    R?rand1;
                    R?rand2;

                    /* send random data in parallel */
                    [  (rand0 > 3) -> p0_0+; [p_a]; p0_0-; [~p_a]
                    [] (rand0 < 4) -> p0_1+; [p_a]; p0_1-; [~p_a]
                    ],
                    [  (rand1 > 3) -> p1_0+; [p_a]; p1_0-; [~p_a]
                    [] (rand1 < 4) -> p1_1+; [p_a]; p1_1-; [~p_a]
                    ],
                    [  (rand2 > 3) -> p2_0+; [p_a]; p2_0-; [~p_a]
                    [] (rand2 < 4) -> p2_1+; [p_a]; p2_1-; [~p_a]
                    ],
                    //Bit value t must be 0 until the last word
                    [  (randl != 0) -> pt_0+; [p_a]; pt_0-; [~p_a]
                    [] (randl  = 0) -> pt_1+; [p_a]; pt_1-; [~p_a]
                    ];
                    

                    randl := randl - 1;
                    log(randl)
                ]
            [] (randc != 3) -> 
                //If not then you are unlucky :(
                log("unlucky");
                skip
            ]
            //ADD A WAIT OR DELAY???????
        ]
    }
}

/* test_root:

 Description: Emulates the final output bus for packets to be sent & processed.
        This is a root is designed to take in any combination of data 
        permutations from the input bus. In testing, these ports can be watched.

 Operation: The root begins by setting its output low. Then it waits for one
        of the deterministically defined input permutations. Once all are 
        received, it sends an acknowledge and waits until all data is off
        to deactivate the acknowledge.

 Features:
    - 4 bit (8 line) input processing
    - Can receive any permutation of data input
    - Sends acks to the sender

 Input Ports:   Name    |   Purpose
                c[8]    |   8 bit bus containing child data   

 Output Ports:  Name    |   Purpose
                c_a     |   Child acknowledge

 Error Handling:    None.
 Known Bugs:        None.
 Limitations:       None.

 Revision History:  09/15/24    George Ore  First instance of code
                    09/16/24    George Ore  Made it work good

 Pseudo Code
   all_out_off();
   while(1)
       wait_for_child_data_on()
       ack_on()
       wait_for_child_data_off()
       ack_off()
*/
defproc test_root(bool? reset; bool? c[8]; bool! c_a){
    
    hse { 
            [reset];
            c_a-;  //Start with the acknowledge off
            log("finished init inside test root");
            [~reset];
            log("reset off in test root");

            *[ /*Start off by waiting for one of the conditions to come true*/
                
            //Explicit cases
            [  c[0] & c[2] & c[4] & c[6] -> skip    //0000
            [] c[1] & c[2] & c[4] & c[6] -> skip    //1000
            [] c[0] & c[3] & c[4] & c[6] -> skip    //0100
            [] c[1] & c[3] & c[4] & c[6] -> skip    //1100
            [] c[0] & c[2] & c[5] & c[6] -> skip    //0010
            [] c[1] & c[2] & c[5] & c[6] -> skip    //1010
            [] c[0] & c[3] & c[5] & c[6] -> skip    //0110
            [] c[1] & c[3] & c[5] & c[6] -> skip    //1110
            [] c[0] & c[2] & c[4] & c[7] -> skip    //0001
            [] c[1] & c[2] & c[4] & c[7] -> skip    //1001
            [] c[0] & c[3] & c[4] & c[7] -> skip    //0101
            [] c[1] & c[3] & c[4] & c[7] -> skip    //1101
            [] c[0] & c[2] & c[5] & c[7] -> skip    //0011
            [] c[1] & c[2] & c[5] & c[7] -> skip    //1011
            [] c[0] & c[3] & c[5] & c[7] -> skip    //0111
            [] c[1] & c[3] & c[5] & c[7] -> skip    //1111
            ];

            //Acknowledge that foo
            c_a+;

            //Now wait until all of them are off
            [~c[0] & ~c[1] & ~c[2] & ~c[3] & ~c[4] & ~c[5] & ~c[6] & ~c[7]];

            //Acknowledge that foo
            c_a-
            ]
        }
}

defproc test(){
    // Create random source 
    pint D_WIDTH = 3;
    sim::rand::source_simple<D_WIDTH, 1, false> src0, src1, src2;
    // Setup reset signal
    bool reset;

    // Define the custom modules
	ctl_h ch;
	ctl_tag c0, c1, c2;
	buffer b0, b1, b2;



    // Define a root node and a test child
	test_child tc0, tc1, tc2;
	test_root tr;

    //Connect all reset signals
    ch.reset = reset;

    c0.reset = reset;
    c1.reset = reset;
    c2.reset = reset;

    b0.reset = reset;
    b1.reset = reset;
    b2.reset = reset;

    tc0.reset = reset;
    tc1.reset = reset;
    tc2.reset = reset;

    tr.reset = reset;

    // Connect test children input wires
    tc0.R = src0.O;
    tc1.R = src1.O;
    tc2.R = src2.O;
    tc0.p_a = b0.c_a;
    tc1.p_a = b1.c_a;
    tc2.p_a = b2.c_a;

    // Connect test root input wires
    tr.c[0] = b0.p0_0 , b1.p0_0 , b2.p0_0 , c0.p_0;
    tr.c[1] = b0.p0_1 | b1.p0_1 | b2.p0_1 | c0.p_1;
    tr.c[2] = b0.p1_0 | b1.p1_0 | b2.p1_0 | c1.p_0;
    tr.c[3] = b0.p1_1 | b1.p1_1 | b2.p1_1 | c1.p_1;
    tr.c[4] = b0.p2_0 | b1.p2_0 | b2.p2_0 | c2.p_0;
    tr.c[5] = b0.p2_1 | b1.p2_1 | b2.p2_1 | c2.p_1;
    tr.c[6] = b0.pt_0 | b1.pt_0 | b2.pt_0;
    tr.c[7] = ch.p_f;

    // Connect ctl_h and ctl_tag input wires
    ch.p_a = tr.c_a; 

    c0.l_r = ch.r_r;
    c1.l_r = c0.r_r;
    c2.l_r = c1.r_r;
    ch.l_r = c2.r_r;
    
    ch.r_a = c0.l_a;
    c0.r_a = c1.l_a;
    c1.r_a = c2.l_a;
    c2.r_a = ch.l_a;
    
	ch.p_0 = b0.p0_0; 
    ch.p_1 = b0.p0_1;

    c0.x_r = b0.x_r;
    c1.x_r = b1.x_r;
    c2.x_r = b2.x_r;
    
    c0.p_a = tr.c_a;
    c1.p_a = tr.c_a;
    c2.p_a = tr.c_a;

    // Connect buffer input wires
    b0.p_a = tr.c_a;
    b1.p_a = tr.c_a;
    b2.p_a = tr.c_a;
    
    b0.x_a = c0.x_a;
    b1.x_a = c1.x_a;
    b2.x_a = c2.x_a;

	b0.c0_0 = tc0.p0_0;
    b0.c0_1 = tc0.p0_1;
    b0.c1_0 = tc0.p1_0;
    b0.c1_1 = tc0.p1_1;
    b0.c2_0 = tc0.p2_0;
    b0.c2_1 = tc0.p2_1;
    b0.ct_0 = tc0.pt_0;
    b0.ct_1 = tc0.pt_1;

	b1.c0_0 = tc1.p0_0;
    b1.c0_1 = tc1.p0_1;
    b1.c1_0 = tc1.p1_0;
    b1.c1_1 = tc1.p1_1;
    b1.c2_0 = tc1.p2_0;
    b1.c2_1 = tc1.p2_1;
    b1.ct_0 = tc1.pt_0;
    b1.ct_1 = tc1.pt_1;

	b2.c0_0 = tc2.p0_0;
    b2.c0_1 = tc2.p0_1;
    b2.c1_0 = tc2.p1_0;
    b2.c1_1 = tc2.p1_1;
    b2.c2_0 = tc2.p2_0;
    b2.c2_1 = tc2.p2_1;
    b2.ct_0 = tc2.pt_0;
    b2.ct_1 = tc2.pt_1;

}

/*******************************************************************************
;*                              Testing Script                                 *
;*******************************************************************************

//Reset mode run
set reset 1     - Sets reset signal on
mode reset      - Turn on simulator's reset mode
cycle           - Run until end of program

//Normal mode run
mode run        - Turn on simulator's normal mode
cycle           - Run until end of program

//Stress testing
set reset 0     - Turn off the reset control signal
random          - Turn on random timing intervals
break-on-warn   - Set break on warnings
status X        - Print all signals with X state (undriven or driven both ways)
status 1        - Print all signals with 1 state
status 0        - Print all signals with 0 state

//Set watches on all relevant signals
watch "tr.c[0]" "tr.c[1]" "tr.c[2]" "tr.c[3]" "tr.c[4]" "tr.c[5]" "tr.c[6]" "tr.c[7]" "tc.p_a"

//Run simulation for a large time interal
advance 1000000000  - Run sim for a long time
status X            - Print all signals with X state

*/

